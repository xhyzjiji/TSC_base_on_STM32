<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj_FLASH\TSC_V400.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj_FLASH\TSC_V400.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Wed Feb 26 18:28:59 2014
<BR><P>
<H3>Maximum Stack Usage =        596 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f10x_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4c]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4d]">flash_allowed_main</a> from ra8806_ctrl.o(i.flash_allowed_main) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[4e]">flash_allowed_datainit</a> from ra8806_ctrl.o(i.flash_allowed_datainit) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[4f]">dayflash_main</a> from ra8806_ctrl.o(i.dayflash_main) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[50]">dayflash_datainit</a> from ra8806_ctrl.o(i.dayflash_datainit) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[51]">nightflash_main</a> from ra8806_ctrl.o(i.nightflash_main) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[52]">nightflash_datainit</a> from ra8806_ctrl.o(i.nightflash_datainit) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.FlashMenu_Init)
 <LI><a href="#[57]">LCD_LedGPIO</a> from ra8806_ctrl.o(i.LCD_LedGPIO) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[58]">LCD_LedGPIO_Init</a> from ra8806_ctrl.o(i.LCD_LedGPIO_Init) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[59]">ledgpio_saveto_e2prom</a> from ra8806_ctrl.o(i.ledgpio_saveto_e2prom) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[5a]">reset_ledgpio_map</a> from ra8806_ctrl.o(i.reset_ledgpio_map) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.LEDColorMenu_Init)
 <LI><a href="#[5b]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[5c]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[5d]">menu_keywork_mode1</a> from key_op.o(i.menu_keywork_mode1) referenced from menu_resource.o(i.MainMenu_Init)
 <LI><a href="#[5e]">disp_frame1</a> from key_op.o(i.disp_frame1) referenced from menu_resource.o(i.MainMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.MainMenu_Init)
 <LI><a href="#[5f]">disp_help1</a> from key_op.o(i.disp_help1) referenced from menu_resource.o(i.MainMenu_Init)
 <LI><a href="#[60]">ManualMode_CutDown_main</a> from ra8806_ctrl.o(i.ManualMode_CutDown_main) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[61]">ManualMode_CutDown_init</a> from ra8806_ctrl.o(i.ManualMode_CutDown_init) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[62]">ManualMode_TimePhase_main</a> from ra8806_ctrl.o(i.ManualMode_TimePhase_main) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[63]">ManualMode_TimePhase_datainit</a> from ra8806_ctrl.o(i.ManualMode_TimePhase_datainit) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[64]">LED_Check_main</a> from ra8806_ctrl.o(i.LED_Check_main) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[65]">LED_Check_datainit</a> from ra8806_ctrl.o(i.LED_Check_datainit) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.ManualModeMenu_Init)
 <LI><a href="#[66]">add_period_main</a> from ra8806_ctrl.o(i.add_period_main) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[67]">add_period_datainit</a> from ra8806_ctrl.o(i.add_period_datainit) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[68]">del_period_main</a> from ra8806_ctrl.o(i.del_period_main) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[69]">del_period_datainit</a> from ra8806_ctrl.o(i.del_period_datainit) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[6a]">set_period_main</a> from ra8806_ctrl.o(i.set_period_main) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[6b]">set_period_datainit</a> from ra8806_ctrl.o(i.set_period_datainit) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.PeriodOfTimeMenu_Init)
 <LI><a href="#[6c]">add_phase_main</a> from ra8806_ctrl.o(i.add_phase_main) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[6d]">add_phase_datainit</a> from ra8806_ctrl.o(i.add_phase_datainit) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[6e]">del_phase_main</a> from ra8806_ctrl.o(i.del_phase_main) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[6f]">del_phase_datainit</a> from ra8806_ctrl.o(i.del_phase_datainit) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[70]">set_phase_main</a> from ra8806_ctrl.o(i.set_phase_main) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[71]">set_phase_datainit</a> from ra8806_ctrl.o(i.set_phase_datainit) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.PhaseMenu_Init)
 <LI><a href="#[72]">RTC_SetDate</a> from ra8806_ctrl.o(i.RTC_SetDate) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[73]">RTC_SetDate_Init</a> from ra8806_ctrl.o(i.RTC_SetDate_Init) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[74]">time_saveto_ds1302</a> from ra8806_ctrl.o(i.time_saveto_ds1302) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.RTCSetMenu_Init)
 <LI><a href="#[75]">DayNight_PeriodofTime</a> from ra8806_ctrl.o(i.DayNight_PeriodofTime) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[76]">DayNight_PeriodofTime_Init</a> from ra8806_ctrl.o(i.DayNight_PeriodofTime_Init) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[53]">menu_keywork_mode2</a> from key_op.o(i.menu_keywork_mode2) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[54]">disp_frame2</a> from key_op.o(i.disp_frame2) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[55]">disp_item</a> from key_op.o(i.disp_item) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[56]">disp_help2</a> from key_op.o(i.disp_help2) referenced from menu_resource.o(i.TimeSetMenu_Init)
 <LI><a href="#[77]">fputc</a> from usart_op.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[78]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[79]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[7a]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[7b]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[7c]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[7d]">tcp_client_errf</a> from tcp_client.o(i.tcp_client_errf) referenced from tcp_client.o(i.tcp_client_connected)
 <LI><a href="#[7e]">tcp_client_recv</a> from tcp_client.o(i.tcp_client_recv) referenced from tcp_client.o(i.tcp_client_connected)
 <LI><a href="#[7f]">tcp_client_sent</a> from tcp_client.o(i.tcp_client_sent) referenced from tcp_client.o(i.tcp_client_connected)
 <LI><a href="#[80]">tcp_client_poll</a> from tcp_client.o(i.tcp_client_poll) referenced from tcp_client.o(i.tcp_client_connected)
 <LI><a href="#[81]">tcp_client_connected</a> from tcp_client.o(i.tcp_client_connected) referenced from tcp_client.o(i.tcp_client_request)
 <LI><a href="#[82]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[83]">tcp_server_errf</a> from tcp_server.o(i.tcp_server_errf) referenced from tcp_server.o(i.tcp_server_accept)
 <LI><a href="#[84]">tcp_server_recv</a> from tcp_server.o(i.tcp_server_recv) referenced from tcp_server.o(i.tcp_server_accept)
 <LI><a href="#[85]">tcp_server_sent</a> from tcp_server.o(i.tcp_server_sent) referenced from tcp_server.o(i.tcp_server_accept)
 <LI><a href="#[86]">tcp_server_poll</a> from tcp_server.o(i.tcp_server_poll) referenced from tcp_server.o(i.tcp_server_accept)
 <LI><a href="#[87]">tcp_server_accept</a> from tcp_server.o(i.tcp_server_accept) referenced from tcp_server.o(i.tcp_server_init)
 <LI><a href="#[88]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[88]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[89]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[213]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>mktime</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvCalendarToUnix
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvUnixToCalendar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1eb]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_poll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_poll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[19a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[90]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_datainit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_datainit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_datainit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_datainit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_datainit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_datainit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_datainit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_datainit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_datainit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_datainit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_datainit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
</UL>

<P><STRONG><a name="[92]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[94]"></a>_scanf_int</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9a]"></a>_scanf_string</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvUnixToCalendar
</UL>

<P><STRONG><a name="[8c]"></a>_localtime</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[95]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[93]"></a>__vfscanf_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[49]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[219]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>__vfscanf</STRONG> (Thumb, 818 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[99]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[21a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>All_LED_Die</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, led_op.o(i.All_LED_Die))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = All_LED_Die &rArr; CrossWay_LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
</UL>

<P><STRONG><a name="[9d]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>CrossWay_LED_Display</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, led_op.o(i.CrossWay_LED_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CrossWay_LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Sec_Display
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HalfSec_Display
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LED_Die
</UL>

<P><STRONG><a name="[a2]"></a>DS1302_ReadByte</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ds1302_op.o(i.DS1302_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadYear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadSec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadMon
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadMin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadHour
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadDate
</UL>

<P><STRONG><a name="[a6]"></a>DS1302_ReadDate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadDate &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[a7]"></a>DS1302_ReadHour</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadHour &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[a8]"></a>DS1302_ReadMin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadMin &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[a9]"></a>DS1302_ReadMon</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadMon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadMon &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[aa]"></a>DS1302_ReadSec</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadSec &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[ab]"></a>DS1302_ReadYear</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ds1302_op.o(i.DS1302_ReadYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1302_ReadYear &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
</UL>

<P><STRONG><a name="[ac]"></a>DS1302_SetDate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetDate &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[ae]"></a>DS1302_SetHour</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetHour &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[af]"></a>DS1302_SetMin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetMin &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[b0]"></a>DS1302_SetMon</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetMon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetMon &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[b1]"></a>DS1302_SetSec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetSec &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[b2]"></a>DS1302_SetYear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ds1302_op.o(i.DS1302_SetYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_SetYear &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_saveto_ds1302
</UL>

<P><STRONG><a name="[ad]"></a>DS1302_WriteByte</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ds1302_op.o(i.DS1302_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetYear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetSec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMon
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetHour
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetDate
</UL>

<P><STRONG><a name="[75]"></a>DayNight_PeriodofTime</STRONG> (Thumb, 662 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.DayNight_PeriodofTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DayNight_PeriodofTime &rArr; DayNight_PeriodofTime_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.TimeSetMenu_Init)
</UL>
<P><STRONG><a name="[76]"></a>DayNight_PeriodofTime_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.DayNight_PeriodofTime_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DayNight_PeriodofTime_Init &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.TimeSetMenu_Init)
</UL>
<P><STRONG><a name="[b8]"></a>DayNight_PeriodofTime_Update</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.DayNight_PeriodofTime_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DayNight_PeriodofTime_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI0_IRQHandler &rArr; enc28j60PhyRead &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyRead
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EXTI1_IRQHandler &rArr; LCD_UpdateInfo &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>EXTI_Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_config.o(i.EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GenerateSWInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_item
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_frame1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_Interface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_Interface
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence_Interface
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_interfaceinit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[c3]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>EXTI_Init</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[11f]"></a>FlashMenu_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, menu_resource.o(i.FlashMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_Config</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, sys_config.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_check_busy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_Initial</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sys_config.o(i.GPIO_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Initial
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>

<P><STRONG><a name="[a5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_check_busy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputData))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[141]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_stop_condition
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_start_condition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_send_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_stop_condition
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_start_condition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_send_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_Write))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[142]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>Get_CurrentTime</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, time_op.o(i.Get_CurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_CurrentTime &rArr; DS1302_ReadYear &rArr; DS1302_ReadByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadYear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadSec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadMon
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadMin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadHour
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadDate
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[cf]"></a>Get_Schedule</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, e2prom_op.o(i.Get_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_Schedule &rArr; e2prom_read_bytes &rArr; e2prom_waitfor_ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_map_check_used
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>I2C1_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sys_config.o(i.I2C1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C1_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Config
</UL>

<P><STRONG><a name="[d3]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Config
</UL>

<P><STRONG><a name="[d4]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Config
</UL>

<P><STRONG><a name="[d8]"></a>KEY1_OP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key_op.o(i.KEY1_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY1_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[db]"></a>KEY2_OP</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, key_op.o(i.KEY2_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY2_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[dc]"></a>KEY3_OP</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, key_op.o(i.KEY3_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY3_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[dd]"></a>KEY4_OP</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, key_op.o(i.KEY4_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY4_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[de]"></a>KEY5_OP</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, key_op.o(i.KEY5_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KEY5_OP &rArr; LCD_ClearMenuText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuForm
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[e0]"></a>KEY6_OP</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, key_op.o(i.KEY6_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KEY6_OP &rArr; LCD_ClearMenuText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuForm
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
</UL>

<P><STRONG><a name="[b5]"></a>KEY_PressMinus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, key_op.o(i.KEY_PressMinus))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[e1]"></a>LCD_AccessLayer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_AccessLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuForm
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_frame2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>

<P><STRONG><a name="[e4]"></a>LCD_CGRAM_CreatWord</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.LCD_CGRAM_CreatWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_CGRAM_CreatWord &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IconInit
</UL>

<P><STRONG><a name="[e5]"></a>LCD_ClearAppWindow</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_ClearAppWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EliminateFlickerOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuForm
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>

<P><STRONG><a name="[ba]"></a>LCD_ClearItemAllText</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_ClearItemAllText))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_ClearItemAllText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_Interface
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_Interface
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence_Interface
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
</UL>

<P><STRONG><a name="[e8]"></a>LCD_ClearItemText</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_ClearItemText))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_ClearItemText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_interfaceinit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
</UL>

<P><STRONG><a name="[df]"></a>LCD_ClearMenuForm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_ClearMenuForm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_ClearMenuForm &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6_OP
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_OP
</UL>

<P><STRONG><a name="[b7]"></a>LCD_ClearMenuText</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_ClearMenuText))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_ClearMenuText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6_OP
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_OP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[e9]"></a>LCD_DDRAMs_ShowRule</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_DDRAMs_ShowRule))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_DDRAMs_ShowRule &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ea]"></a>LCD_DisplayMainPannel</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_DisplayMainPannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_DisplayMainPannel &rArr; LCD_DrawForm &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InterfaceInit
</UL>

<P><STRONG><a name="[eb]"></a>LCD_DrawForm</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, ra8806_ctrl.o(i.LCD_DrawForm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_DrawForm &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_frame2
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_frame1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
</UL>

<P><STRONG><a name="[ef]"></a>LCD_DrawRectangle</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InterfaceInit
</UL>

<P><STRONG><a name="[e7]"></a>LCD_EliminateFlickerOFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_EliminateFlickerOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_EliminateFlickerOFF &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAppWindow
</UL>

<P><STRONG><a name="[f0]"></a>LCD_FillAppWindow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_FillAppWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_FillAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EliminateFlickerOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f1]"></a>LCD_IconInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_IconInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_IconInit &rArr; LCD_CGRAM_CreatWord &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CGRAM_CreatWord
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>LCD_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Init &rArr; LCD_FillAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextBold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLayer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAppWindow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DDRAMs_ShowRule
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>LCD_InterfaceInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_InterfaceInit &rArr; LCD_DisplayMainPannel &rArr; LCD_DrawForm &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>LCD_Inv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_Inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Inv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_item
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
</UL>

<P><STRONG><a name="[57]"></a>LCD_LedGPIO</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LCD_LedGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_LedGPIO &rArr; LCD_LedGPIO_Update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_map_check_used
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.LEDColorMenu_Init)
</UL>
<P><STRONG><a name="[58]"></a>LCD_LedGPIO_Init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_LedGPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_LedGPIO_Init &rArr; LCD_LedGPIO_Update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.LEDColorMenu_Init)
</UL>
<P><STRONG><a name="[f9]"></a>LCD_LedGPIO_Update</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LCD_LedGPIO_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_LedGPIO_Update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
</UL>

<P><STRONG><a name="[c1]"></a>LCD_NoInv</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_NoInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_item
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
</UL>

<P><STRONG><a name="[da]"></a>LCD_NorItem</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, key_op.o(i.LCD_NorItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_NorItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_OP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_OP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_OP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_OP
</UL>

<P><STRONG><a name="[e6]"></a>LCD_PicsMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_PicsMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAppWindow
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[ee]"></a>LCD_ReadData</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[e2]"></a>LCD_ReadREG</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_ReadREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextBold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLayer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAppWindow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EliminateFlickerOFF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DDRAMs_ShowRule
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CGRAM_CreatWord
</UL>

<P><STRONG><a name="[d9]"></a>LCD_RefreshItem</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, key_op.o(i.LCD_RefreshItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_OP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_OP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_OP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_OP
</UL>

<P><STRONG><a name="[f3]"></a>LCD_Reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bc]"></a>LCD_SetAppwindow</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LCD_SetAppwindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_SetAppwindow &rArr; LCD_WriteREG &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuForm
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_frame2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_Interface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_Interface
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence_Interface
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_interfaceinit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
</UL>

<P><STRONG><a name="[be]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetCursor &rArr; LCD_WriteREG &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
</UL>

<P><STRONG><a name="[f4]"></a>LCD_ShowLayer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_ShowLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_ShowLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f5]"></a>LCD_TextBold</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_TextBold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_TextBold &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[fb]"></a>LCD_TextMode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_TextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_TextMode &rArr; LCD_EliminateFlickerOFF &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EliminateFlickerOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
</UL>

<P><STRONG><a name="[c7]"></a>LCD_UpdateInfo</STRONG> (Thumb, 1020 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.LCD_UpdateInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_UpdateInfo &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>LCD_WriteChar1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LCD_WriteChar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_WriteChar1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
</UL>

<P><STRONG><a name="[ec]"></a>LCD_WriteChar2</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_WriteChar2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_WriteChar2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
</UL>

<P><STRONG><a name="[bf]"></a>LCD_WriteCommand</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CGRAM_CreatWord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
</UL>

<P><STRONG><a name="[c0]"></a>LCD_WriteData</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CGRAM_CreatWord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Update
</UL>

<P><STRONG><a name="[e3]"></a>LCD_WriteREG</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_WriteREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteREG &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteWordFromCGRAM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextBold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLayer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAppWindow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EliminateFlickerOFF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DDRAMs_ShowRule
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CGRAM_CreatWord
</UL>

<P><STRONG><a name="[ed]"></a>LCD_WriteText1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LCD_WriteText1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_item
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
</UL>

<P><STRONG><a name="[bb]"></a>LCD_WriteText2</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LCD_WriteText2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InterfaceInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_item
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_help1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshItem
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NorItem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_Interface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_Interface
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence_Interface
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_interfaceinit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Update
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainPannel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime_Init
</UL>

<P><STRONG><a name="[fd]"></a>LCD_WriteWordFromCGRAM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LCD_WriteWordFromCGRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_WriteWordFromCGRAM &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteREG
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
</UL>

<P><STRONG><a name="[11e]"></a>LEDColorMenu_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, menu_resource.o(i.LEDColorMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[100]"></a>LED_Check</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.LED_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LED_Check &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_sel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LED_Die
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[102]"></a>LED_Check_Update</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LED_Check_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_Check_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
</UL>

<P><STRONG><a name="[65]"></a>LED_Check_datainit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.LED_Check_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LED_Check_datainit &rArr; LED_Check_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[103]"></a>LED_Check_interfaceinit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LED_Check_interfaceinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LED_Check_interfaceinit &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LED_Die
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_Update
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[64]"></a>LED_Check_main</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.LED_Check_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LED_Check_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeTimeTable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeDayOrNight
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_interfaceinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[10a]"></a>LED_HalfSec_Display</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, led_op.o(i.LED_HalfSec_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_HalfSec_Display &rArr; CrossWay_LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>LED_Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, led_op.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LED_Init &rArr; RTC_Config &rArr; Time_SetCalendarTime &rArr; Time_ConvCalendarToUnix &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeTimeTable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeDayOrNight
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LED_Die
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>LED_Interpretation</STRONG> (Thumb, 816 bytes, Stack size 20 bytes, led_op.o(i.LED_Interpretation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_Interpretation
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[10d]"></a>LED_Sec_Display</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, led_op.o(i.LED_Sec_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Sec_Display &rArr; CrossWay_LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>LE_sel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, led_op.o(i.LE_sel))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
</UL>

<P><STRONG><a name="[10e]"></a>LwIP_Init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>MainMenu_Init</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, menu_resource.o(i.MainMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[11b]"></a>ManualModeMenu_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, menu_resource.o(i.ManualModeMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[114]"></a>ManualMode_CutDown</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_CutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ManualMode_CutDown &rArr; LCD_ClearMenuText &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
</UL>

<P><STRONG><a name="[61]"></a>ManualMode_CutDown_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_CutDown_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ManualMode_CutDown_init &rArr; ManualMode_CutDown_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[115]"></a>ManualMode_CutDown_interfaceinit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.ManualMode_CutDown_interfaceinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ManualMode_CutDown_interfaceinit &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
</UL>

<P><STRONG><a name="[60]"></a>ManualMode_CutDown_main</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_CutDown_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ManualMode_CutDown_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_interfaceinit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[116]"></a>ManualMode_TimePhase</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_TimePhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ManualMode_TimePhase &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
</UL>

<P><STRONG><a name="[117]"></a>ManualMode_TimePhase_Update</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.ManualMode_TimePhase_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ManualMode_TimePhase_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
</UL>

<P><STRONG><a name="[63]"></a>ManualMode_TimePhase_datainit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_TimePhase_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ManualMode_TimePhase_datainit &rArr; ManualMode_TimePhase_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[118]"></a>ManualMode_TimePhase_interface</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_TimePhase_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ManualMode_TimePhase_interface &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_Update
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
</UL>

<P><STRONG><a name="[62]"></a>ManualMode_TimePhase_main</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ManualMode_TimePhase_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ManualMode_TimePhase_main &rArr; Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeTimeTable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeDayOrNight
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.ManualModeMenu_Init)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>MenuLock_Update</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.MenuLock_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MenuLock_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
</UL>

<P><STRONG><a name="[104]"></a>MenuLock_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.MenuLock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MenuLock_init &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemText
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[11a]"></a>Menu_Init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, menu_resource.o(i.Menu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSetMenu_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSetMenu_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhaseMenu_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodOfTimeMenu_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualModeMenu_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorMenu_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashMenu_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>Menu_Lock</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.Menu_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Menu_Lock &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLock_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>NVIC_Config</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, sys_config.o(i.NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[124]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[125]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[134]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>PeriodOfTimeMenu_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, menu_resource.o(i.PeriodOfTimeMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[120]"></a>PhaseMenu_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, menu_resource.o(i.PhaseMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[132]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[d6]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[131]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[160]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[9e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[127]"></a>RCC_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sys_config.o(i.RCC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Config &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[d7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[133]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12e]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[129]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[135]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12f]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[130]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[12c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[12b]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[137]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[136]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[12a]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
</UL>

<P><STRONG><a name="[11c]"></a>RTCSetMenu_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, menu_resource.o(i.RTCSetMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[13e]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>RTC_Config</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sys_config.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = RTC_Config &rArr; Time_SetCalendarTime &rArr; Time_ConvCalendarToUnix &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[144]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[145]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[162]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetUnixTime
</UL>

<P><STRONG><a name="[13c]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RTC_IRQHandler &rArr; LCD_UpdateInfo &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetUnixTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvUnixToCalendar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Sec_Display
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>RTC_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ledgpio_map
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_saveto_e2prom
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_interface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[143]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetUnixTime
</UL>

<P><STRONG><a name="[72]"></a>RTC_SetDate</STRONG> (Thumb, 1488 bytes, Stack size 48 bytes, ra8806_ctrl.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RTC_SetDate &rArr; Time_SetCalendarTime &rArr; Time_ConvCalendarToUnix &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.RTCSetMenu_Init)
</UL>
<P><STRONG><a name="[73]"></a>RTC_SetDate_Init</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, ra8806_ctrl.o(i.RTC_SetDate_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RTC_SetDate_Init &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.RTCSetMenu_Init)
</UL>
<P><STRONG><a name="[146]"></a>RTC_SetDate_Update</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.RTC_SetDate_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_SetDate_Update &rArr; LCD_NoInv &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[13b]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[b3]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetUnixTime
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ledgpio_map
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_saveto_e2prom
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[138]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[147]"></a>SPI1_Config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sys_config.o(i.SPI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_Config &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>SPI1_ReadWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_op.o(i.SPI1_ReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
</UL>

<P><STRONG><a name="[149]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Config
</UL>

<P><STRONG><a name="[14b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[14d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[14c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[148]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Config
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>Set_FlashAllowence</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.Set_FlashAllowence))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Set_FlashAllowence &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
</UL>

<P><STRONG><a name="[152]"></a>Set_FlashAllowence_Interface</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.Set_FlashAllowence_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Set_FlashAllowence_Interface &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM2_IRQHandler &rArr; LED_HalfSec_Display &rArr; CrossWay_LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeTimeTable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_JudgeDayOrNight
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Interpretation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HalfSec_Display
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[155]"></a>TIM_Basic_Config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sys_config.o(i.TIM_Basic_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Basic_Config &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[154]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>TIM_Config</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, sys_config.o(i.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_Config &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[153]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[157]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_InternalClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[15f]"></a>TIM_OC2Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[15b]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[158]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[15a]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_UpdateRequestConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[11d]"></a>TimeSetMenu_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, menu_resource.o(i.TimeSetMenu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[161]"></a>Time_ConvCalendarToUnix</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, time_op.o(i.Time_ConvCalendarToUnix))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Time_ConvCalendarToUnix &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
</UL>

<P><STRONG><a name="[140]"></a>Time_ConvUnixToCalendar</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, time_op.o(i.Time_ConvUnixToCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Time_ConvUnixToCalendar &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>Time_GetUnixTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time_op.o(i.Time_GetUnixTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_GetUnixTime
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>Time_JudgeDayOrNight</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, time_op.o(i.Time_JudgeDayOrNight))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[107]"></a>Time_JudgeTimeTable</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, time_op.o(i.Time_JudgeTimeTable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
</UL>

<P><STRONG><a name="[13a]"></a>Time_SetCalendarTime</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, time_op.o(i.Time_SetCalendarTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Time_SetCalendarTime &rArr; Time_ConvCalendarToUnix &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetUnixTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ConvCalendarToUnix
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[163]"></a>Time_SetUnixTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time_op.o(i.Time_SetUnixTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Time_SetUnixTime &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
</UL>

<P><STRONG><a name="[166]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[164]"></a>USART_Config</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sys_config.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1a0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>Var_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ex_var.o(i.Var_Init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21c]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[c4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_sent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_errf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_sent
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_errf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_keywork_mode1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21d]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[1ee]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[21e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[220]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16b]"></a>add_period</STRONG> (Thumb, 756 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.add_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = add_period &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_main
</UL>

<P><STRONG><a name="[67]"></a>add_period_datainit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.add_period_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = add_period_datainit &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[16c]"></a>add_period_interface</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.add_period_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = add_period_interface &rArr; add_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_main
</UL>

<P><STRONG><a name="[66]"></a>add_period_main</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.add_period_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = add_period_main &rArr; add_period_interface &rArr; add_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[16d]"></a>add_period_update</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.add_period_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = add_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_interface
</UL>

<P><STRONG><a name="[16e]"></a>add_phase</STRONG> (Thumb, 970 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.add_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = add_phase &rArr; add_phase_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_main
</UL>

<P><STRONG><a name="[6d]"></a>add_phase_datainit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.add_phase_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = add_phase_datainit &rArr; add_phase_main &rArr; add_phase &rArr; add_phase_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[170]"></a>add_phase_interface</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.add_phase_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = add_phase_interface &rArr; add_phase_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_main
</UL>

<P><STRONG><a name="[6c]"></a>add_phase_main</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.add_phase_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = add_phase_main &rArr; add_phase &rArr; add_phase_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[16f]"></a>add_phase_update</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.add_phase_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = add_phase_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_interface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
</UL>

<P><STRONG><a name="[171]"></a>dayflash</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.dayflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dayflash &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
</UL>

<P><STRONG><a name="[172]"></a>dayflash_Interface</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.dayflash_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dayflash_Interface &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
</UL>

<P><STRONG><a name="[50]"></a>dayflash_datainit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.dayflash_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dayflash_datainit &rArr; dayflash_main &rArr; dayflash &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[4f]"></a>dayflash_main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.dayflash_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dayflash_main &rArr; dayflash &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_Interface
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[173]"></a>del_period</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.del_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = del_period &rArr; del_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_main
</UL>

<P><STRONG><a name="[69]"></a>del_period_datainit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.del_period_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = del_period_datainit &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[175]"></a>del_period_interface</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.del_period_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = del_period_interface &rArr; del_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_main
</UL>

<P><STRONG><a name="[68]"></a>del_period_main</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.del_period_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = del_period_main &rArr; del_period_interface &rArr; del_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[174]"></a>del_period_update</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, ra8806_ctrl.o(i.del_period_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = del_period_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_interface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
</UL>

<P><STRONG><a name="[176]"></a>del_phase</STRONG> (Thumb, 1248 bytes, Stack size 32 bytes, ra8806_ctrl.o(i.del_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = del_phase &rArr; del_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_main
</UL>

<P><STRONG><a name="[6f]"></a>del_phase_datainit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.del_phase_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = del_phase_datainit &rArr; del_phase_main &rArr; del_phase &rArr; del_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[178]"></a>del_phase_interface</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.del_phase_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = del_phase_interface &rArr; del_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_main
</UL>

<P><STRONG><a name="[6e]"></a>del_phase_main</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.del_phase_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = del_phase_main &rArr; del_phase &rArr; del_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[177]"></a>del_phase_update</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, ra8806_ctrl.o(i.del_phase_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = del_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_interface
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
</UL>

<P><STRONG><a name="[cd]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[a1]"></a>delay_100ns</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.delay_100ns))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossWay_LED_Display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_stop_condition
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_start_condition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_send_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_saveto_e2prom
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PicsMode
</UL>

<P><STRONG><a name="[a3]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_ReadByte
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
</UL>

<P><STRONG><a name="[5e]"></a>disp_frame1</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, key_op.o(i.disp_frame1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disp_frame1 &rArr; LCD_DrawForm &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.MainMenu_Init)
</UL>
<P><STRONG><a name="[54]"></a>disp_frame2</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, key_op.o(i.disp_frame2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disp_frame2 &rArr; LCD_DrawForm &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawForm
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Address Reference Count : 7]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
<LI> menu_resource.o(i.RTCSetMenu_Init)
<LI> menu_resource.o(i.TimeSetMenu_Init)
<LI> menu_resource.o(i.FlashMenu_Init)
<LI> menu_resource.o(i.LEDColorMenu_Init)
<LI> menu_resource.o(i.ManualModeMenu_Init)
<LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[5f]"></a>disp_help1</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, key_op.o(i.disp_help1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disp_help1 &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.MainMenu_Init)
</UL>
<P><STRONG><a name="[56]"></a>disp_help2</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, key_op.o(i.disp_help2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disp_help2 &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Address Reference Count : 7]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
<LI> menu_resource.o(i.RTCSetMenu_Init)
<LI> menu_resource.o(i.TimeSetMenu_Init)
<LI> menu_resource.o(i.FlashMenu_Init)
<LI> menu_resource.o(i.LEDColorMenu_Init)
<LI> menu_resource.o(i.ManualModeMenu_Init)
<LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[55]"></a>disp_item</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, key_op.o(i.disp_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disp_item &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
</UL>
<BR>[Address Reference Count : 8]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
<LI> menu_resource.o(i.RTCSetMenu_Init)
<LI> menu_resource.o(i.TimeSetMenu_Init)
<LI> menu_resource.o(i.FlashMenu_Init)
<LI> menu_resource.o(i.LEDColorMenu_Init)
<LI> menu_resource.o(i.MainMenu_Init)
<LI> menu_resource.o(i.ManualModeMenu_Init)
<LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[179]"></a>e2prom_check_busy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at24c64_op.o(i.e2prom_check_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = e2prom_check_busy &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>

<P><STRONG><a name="[d0]"></a>e2prom_read_bytes</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, at24c64_op.o(i.e2prom_read_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = e2prom_read_bytes &rArr; e2prom_waitfor_ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_stop_condition
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_start_condition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_send_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_check_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Schedule
</UL>

<P><STRONG><a name="[17b]"></a>e2prom_send_data</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, at24c64_op.o(i.e2prom_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = e2prom_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>

<P><STRONG><a name="[17a]"></a>e2prom_start_condition</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, at24c64_op.o(i.e2prom_start_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = e2prom_start_condition
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>

<P><STRONG><a name="[17d]"></a>e2prom_stop_condition</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at24c64_op.o(i.e2prom_stop_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = e2prom_stop_condition
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>

<P><STRONG><a name="[17c]"></a>e2prom_waitfor_ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at24c64_op.o(i.e2prom_waitfor_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = e2prom_waitfor_ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read_bytes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>

<P><STRONG><a name="[17e]"></a>e2prom_write_bytes</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, at24c64_op.o(i.e2prom_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = e2prom_write_bytes &rArr; e2prom_waitfor_ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_waitfor_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_stop_condition
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_start_condition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_send_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_check_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledgpio_saveto_e2prom
</UL>

<P><STRONG><a name="[17f]"></a>enc28j60Init</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[184]"></a>enc28j60PacketReceive</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60PacketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[187]"></a>enc28j60PacketSend</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PacketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[c5]"></a>enc28j60PhyRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PhyRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PhyRead &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>enc28j60PhyWrite</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PhyWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[c2]"></a>enc28j60Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>enc28j60ReadBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[185]"></a>enc28j60ReadOp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60ReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[183]"></a>enc28j60SetBank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60SetBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[181]"></a>enc28j60Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[188]"></a>enc28j60WriteBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60WriteBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[180]"></a>enc28j60WriteOp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60WriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[79]"></a>etharp_output</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[192]"></a>etharp_query</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[194]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[199]"></a>etharp_tmr</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
</UL>

<P><STRONG><a name="[5b]"></a>ethernet_input</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[5c]"></a>ethernetif_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[19e]"></a>ethernetif_input</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
</UL>

<P><STRONG><a name="[4e]"></a>flash_allowed_datainit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.flash_allowed_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = flash_allowed_datainit &rArr; flash_allowed_main &rArr; Set_FlashAllowence &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[4d]"></a>flash_allowed_main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.flash_allowed_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = flash_allowed_main &rArr; Set_FlashAllowence &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence_Interface
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[151]"></a>flashfunc_update</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.flashfunc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flashfunc_update &rArr; LCD_WriteText1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence
</UL>

<P><STRONG><a name="[77]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart_op.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[b6]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_allowed_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase_main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period_main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash_main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase_main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period_main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase_main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown_main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_CutDown
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DayNight_PeriodofTime
</UL>

<P><STRONG><a name="[1a1]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1a3]"></a>icmp_input</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1a8]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[1a5]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[1a4]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1aa]"></a>inet_chksum_pseudo</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[190]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[1ab]"></a>ip_frag</STRONG> (Thumb, 448 bytes, Stack size 96 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[19b]"></a>ip_input</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1a7]"></a>ip_output</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[1a6]"></a>ip_output_if</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[1b4]"></a>ip_reass</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1b8]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[f7]"></a>keyfunction_clear_help</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.keyfunction_clear_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = keyfunction_clear_help &rArr; LCD_ClearAppWindow &rArr; LCD_PicsMode &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearAppWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
</UL>

<P><STRONG><a name="[f8]"></a>keyfunction_help</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.keyfunction_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AccessLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_phase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_period
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_phase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_period
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FlashAllowence
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Lock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode_TimePhase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Check
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
</UL>

<P><STRONG><a name="[d1]"></a>ledgpio_map_check_used</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, led_op.o(i.ledgpio_map_check_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ledgpio_map_check_used
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Schedule
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LedGPIO
</UL>

<P><STRONG><a name="[59]"></a>ledgpio_saveto_e2prom</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.ledgpio_saveto_e2prom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ledgpio_saveto_e2prom &rArr; e2prom_write_bytes &rArr; e2prom_waitfor_ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.LEDColorMenu_Init)
</UL>
<P><STRONG><a name="[1c0]"></a>lwip_eth_poll</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, netconf.o(i.lwip_eth_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = lwip_eth_poll &rArr; tcp_client_request &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[18c]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1c3]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[1ac]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = main &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InterfaceInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IconInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Schedule
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[91]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1c7]"></a>mem_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i.mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_calloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[1c8]"></a>mem_free</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_poll
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_errf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_sent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[10f]"></a>mem_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[19c]"></a>mem_malloc</STRONG> (Thumb, 368 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1d1]"></a>mem_trim</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[1b2]"></a>memp_free</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[110]"></a>memp_init</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[1b1]"></a>memp_malloc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>

<P><STRONG><a name="[5d]"></a>menu_keywork_mode1</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, key_op.o(i.menu_keywork_mode1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = menu_keywork_mode1 &rArr; KEY4_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6_OP
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_OP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_OP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_OP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_OP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_OP
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.MainMenu_Init)
</UL>
<P><STRONG><a name="[53]"></a>menu_keywork_mode2</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, key_op.o(i.menu_keywork_mode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = menu_keywork_mode2 &rArr; KEY2_OP &rArr; LCD_RefreshItem &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6_OP
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_OP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_OP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_OP
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 7]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
<LI> menu_resource.o(i.RTCSetMenu_Init)
<LI> menu_resource.o(i.TimeSetMenu_Init)
<LI> menu_resource.o(i.FlashMenu_Init)
<LI> menu_resource.o(i.LEDColorMenu_Init)
<LI> menu_resource.o(i.ManualModeMenu_Init)
<LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[111]"></a>netif_add</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[1ca]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[112]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[1cd]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1cb]"></a>netif_set_ipaddr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1cc]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[113]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[1cf]"></a>nightflash_Interface</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.nightflash_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nightflash_Interface &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
</UL>

<P><STRONG><a name="[52]"></a>nightflash_datainit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.nightflash_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nightflash_datainit &rArr; nightflash_main &rArr; dayflash &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[51]"></a>nightflash_main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.nightflash_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nightflash_main &rArr; dayflash &rArr; keyfunction_help &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_Interface
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashfunc_update
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayflash
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nightflash_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.FlashMenu_Init)
</UL>
<P><STRONG><a name="[195]"></a>pbuf_alloc</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[1ae]"></a>pbuf_alloced_custom</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[1b0]"></a>pbuf_cat</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1b9]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[196]"></a>pbuf_copy</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1d0]"></a>pbuf_copy_partial</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[18a]"></a>pbuf_free</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[18f]"></a>pbuf_header</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1b3]"></a>pbuf_realloc</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[197]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1d2]"></a>print_client_pcb_state</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp_client.o(i.print_client_pcb_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_client_pcb_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_sent
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_poll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[1d4]"></a>print_server_pcb_state</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp_server.o(i.print_server_pcb_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_server_pcb_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_sent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_poll
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
</UL>

<P><STRONG><a name="[1b5]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[5a]"></a>reset_ledgpio_map</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.reset_ledgpio_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_ledgpio_map
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.LEDColorMenu_Init)
</UL>
<P><STRONG><a name="[1d5]"></a>set_period</STRONG> (Thumb, 918 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.set_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_period &rArr; set_period_update &rArr; LCD_WriteChar1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_main
</UL>

<P><STRONG><a name="[6b]"></a>set_period_datainit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.set_period_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_period_datainit &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[1d7]"></a>set_period_interface</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.set_period_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_period_interface &rArr; set_period_update &rArr; LCD_WriteChar1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_main
</UL>

<P><STRONG><a name="[6a]"></a>set_period_main</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ra8806_ctrl.o(i.set_period_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_period_main &rArr; set_period_interface &rArr; set_period_update &rArr; LCD_WriteChar1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PeriodOfTimeMenu_Init)
</UL>
<P><STRONG><a name="[1d6]"></a>set_period_update</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, ra8806_ctrl.o(i.set_period_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_period_update &rArr; LCD_WriteChar1 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period_interface
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_period
</UL>

<P><STRONG><a name="[1d8]"></a>set_phase</STRONG> (Thumb, 1614 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.set_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_phase &rArr; set_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_PressMinus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_help
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfunction_clear_help
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
</UL>

<P><STRONG><a name="[71]"></a>set_phase_datainit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ra8806_ctrl.o(i.set_phase_datainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_phase_datainit &rArr; set_phase_main &rArr; set_phase_interface &rArr; set_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[1da]"></a>set_phase_interface</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.set_phase_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_phase_interface &rArr; set_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAppwindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearItemAllText
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
</UL>

<P><STRONG><a name="[70]"></a>set_phase_main</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ra8806_ctrl.o(i.set_phase_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_phase_main &rArr; set_phase_interface &rArr; set_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearMenuText
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_datainit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.PhaseMenu_Init)
</UL>
<P><STRONG><a name="[1d9]"></a>set_phase_update</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, ra8806_ctrl.o(i.set_phase_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_phase_update &rArr; LCD_WriteText2 &rArr; LCD_AccessLayer &rArr; LCD_ReadREG &rArr; LCD_ReadData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteText1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NoInv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Inv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteChar1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_main
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_interface
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase
</UL>

<P><STRONG><a name="[1db]"></a>sys_timeout</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[1dc]"></a>tcp_abandon</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1ce]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[20e]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
</UL>

<P><STRONG><a name="[1e0]"></a>tcp_alloc</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[1f1]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
</UL>

<P><STRONG><a name="[1e4]"></a>tcp_bind</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
</UL>

<P><STRONG><a name="[81]"></a>tcp_client_connected</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tcp_client.o(i.tcp_client_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_client_connected &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client.o(i.tcp_client_request)
</UL>
<P><STRONG><a name="[7d]"></a>tcp_client_errf</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tcp_client.o(i.tcp_client_errf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_client_errf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client.o(i.tcp_client_connected)
</UL>
<P><STRONG><a name="[80]"></a>tcp_client_poll</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tcp_client.o(i.tcp_client_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tcp_client_poll &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client.o(i.tcp_client_connected)
</UL>
<P><STRONG><a name="[7e]"></a>tcp_client_recv</STRONG> (Thumb, 716 bytes, Stack size 136 bytes, tcp_client.o(i.tcp_client_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_client_recv &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_SetCalendarTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetYear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetSec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMon
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetHour
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetDate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client.o(i.tcp_client_connected)
</UL>
<P><STRONG><a name="[1c2]"></a>tcp_client_request</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp_client.o(i.tcp_client_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_client_request &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>tcp_client_sent</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp_client.o(i.tcp_client_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_client_sent &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client.o(i.tcp_client_connected)
</UL>
<P><STRONG><a name="[1ef]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_poll
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_sent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[1f2]"></a>tcp_connect</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
</UL>

<P><STRONG><a name="[1d3]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_client_pcb_state
</UL>

<P><STRONG><a name="[1f7]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[1f8]"></a>tcp_enqueue_flags</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[1e7]"></a>tcp_err</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[1fb]"></a>tcp_fasttmr</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1b7]"></a>tcp_input</STRONG> (Thumb, 1364 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[200]"></a>tcp_keepalive</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[203]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
</UL>

<P><STRONG><a name="[1f0]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_request
</UL>

<P><STRONG><a name="[1e3]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1f6]"></a>tcp_output</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1f4]"></a>tcp_pcb_purge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1dd]"></a>tcp_pcb_remove</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1ea]"></a>tcp_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[1fc]"></a>tcp_process_refused_data</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[1e8]"></a>tcp_recv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[7c]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[1ed]"></a>tcp_recved</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
</UL>

<P><STRONG><a name="[209]"></a>tcp_rexmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[20a]"></a>tcp_rexmit_fast</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[20d]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1df]"></a>tcp_rst</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[20c]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1fa]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[1de]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[205]"></a>tcp_send_empty_ack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[1f5]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1e9]"></a>tcp_sent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[87]"></a>tcp_server_accept</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tcp_server.o(i.tcp_server_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_server_accept &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_server.o(i.tcp_server_init)
</UL>
<P><STRONG><a name="[83]"></a>tcp_server_errf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tcp_server.o(i.tcp_server_errf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcp_server_errf &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_server.o(i.tcp_server_accept)
</UL>
<P><STRONG><a name="[1c6]"></a>tcp_server_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tcp_server.o(i.tcp_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_server_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>tcp_server_poll</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_server.o(i.tcp_server_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_server_poll &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_server.o(i.tcp_server_accept)
</UL>
<P><STRONG><a name="[84]"></a>tcp_server_recv</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, tcp_server.o(i.tcp_server_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_server_recv &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_server.o(i.tcp_server_accept)
</UL>
<P><STRONG><a name="[85]"></a>tcp_server_sent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp_server.o(i.tcp_server_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_server_sent &rArr; print_server_pcb_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_server_pcb_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_server.o(i.tcp_server_accept)
</UL>
<P><STRONG><a name="[20f]"></a>tcp_slowtmr</STRONG> (Thumb, 916 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1e6]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1c1]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_poll
</UL>

<P><STRONG><a name="[20b]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[1ec]"></a>tcp_write</STRONG> (Thumb, 1022 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_poll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_accept
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_recv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_poll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
</UL>

<P><STRONG><a name="[210]"></a>tcp_zero_window_probe</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[74]"></a>time_saveto_ds1302</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ra8806_ctrl.o(i.time_saveto_ds1302))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = time_saveto_ds1302 &rArr; DS1302_SetYear &rArr; DS1302_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetYear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetSec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMon
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetMin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetHour
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_SetDate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_resource.o(i.RTCSetMenu_Init)
</UL>
<P><STRONG><a name="[1b6]"></a>udp_input</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14e]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14f]"></a>SetSysClockTo72</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1c9]"></a>plug_holes</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[82]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[1f3]"></a>tcp_close_shutdown</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[1e2]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1e1]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1e5]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[1fe]"></a>tcp_listen_input</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[204]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[202]"></a>tcp_parseopt</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1ff]"></a>tcp_process</STRONG> (Thumb, 1414 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[208]"></a>tcp_receive</STRONG> (Thumb, 2756 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[1fd]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[1f9]"></a>tcp_create_segment</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[201]"></a>tcp_output_alloc_header</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[206]"></a>tcp_output_segment</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[207]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[211]"></a>tcp_write_checks</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[88]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[1a2]"></a>icmp_send_response</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[1a9]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[1ad]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[1af]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
</UL>

<P><STRONG><a name="[1bc]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1bd]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[1bb]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1bf]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[1ba]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[7b]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[189]"></a>etharp_arp_input</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[18d]"></a>etharp_find_entry</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[18e]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[191]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[198]"></a>etharp_raw</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[193]"></a>etharp_send_ip</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[18b]"></a>etharp_update_arp_entry</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[19d]"></a>low_level_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = low_level_init &rArr; enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[19f]"></a>low_level_input</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[7a]"></a>low_level_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = low_level_output &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[168]"></a>_printf_core</STRONG> (Thumb, 430 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>

<P><STRONG><a name="[78]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL>
<P><STRONG><a name="[4b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
